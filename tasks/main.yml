---
# Read distro specific vars, dont put vars here which the user overrides since include_vars has a high precedence
- name: Include OS-family specific variables
  ansible.builtin.include_vars: "vars-{{ ansible_os_family }}.yml"
  tags:
    - always

- name: Include distribution version specific variables (if present)
  ansible.builtin.include_vars: "vars-{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
  failed_when: false
  tags:
    - always

- name: Determine MySQL/MariaDB Version
  ansible.builtin.command: mysql --version
  register: mysql_version
  changed_when: false
  tags:
    - alldbs
    - check
    - ringbuffer
    - user

- name: Check if mysql_mycnf_file file exists
  ansible.builtin.stat:
    path: "{{ mysql_mycnf_file }}"
  register: mysql_mycnf_file
  tags:
    - alldbs
    - check
    - ringbuffer
    - user

- name: Fail if mysql_mycnf_file is missing
  ansible.builtin.fail:
    msg: "Config {{ mysql_mycnf_file }} is missing. aborting."
  when:
    - not mysql_mycnf_file.stat.exists
    - mysql_mysqldump_fail_if_mycnf_file_missing
  tags:
    - alldbs
    - check
    - ringbuffer
    - user

- name: Check if mysql_mysqldump_backup_cred_file file exists
  ansible.builtin.stat:
    path: "{{ mysql_mysqldump_backup_cred_file }}"
  register: mysql_mysqldump_backup_cred_file_exists
  tags:
    - alldbs
    - check
    - ringbuffer
    - user

- name: Generate password
  ansible.builtin.set_fact:
    mysql_mysqldump_user_password: "{{ lookup('password', '/dev/null length=20 chars=ascii_letters') }}"
  no_log: True
  when:
    - not mysql_mysqldump_backup_cred_file_exists.stat.exists or mysql_mysqldump_backup_cred_file_overwrite
    - not mysql_mysqldump_use_existing_user
  tags:
    - alldbs
    - check
    - ringbuffer
    - user

- name: Ensure MySQL Python libraries are installed
  ansible.builtin.package:
    name: "{{ mysql_python_package }}"
    state: present
  when:
    - not mysql_mysqldump_backup_cred_file_exists.stat.exists or mysql_mysqldump_backup_cred_file_overwrite
    - not mysql_mysqldump_use_existing_user
  tags:
    - alldbs
    - check
    - ringbuffer
    - user

- name: Create MySQL backup user (socket)
  community.mysql.mysql_user:
    name: "{{ mysql_mysqldump_user_name }}"
    password: "{{ mysql_mysqldump_user_password }}"
    check_implicit_admin: true
    priv: "*.*:SELECT,FILE,LOCK TABLES"
    state: "present"
    append_privs: "yes"
    encrypted: "no"
  when:
    - not mysql_mysqldump_backup_cred_file_exists.stat.exists or mysql_mysqldump_backup_cred_file_overwrite
    - mysql_mysqldump_connect_method == "socket"
    - not mysql_mysqldump_use_existing_user
  no_log: true
  tags:
    - alldbs
    - check
    - ringbuffer
    - user

- name: Create MySQL backup user (tcp mode)
  community.mysql.mysql_user:
    name: "{{ mysql_mysqldump_user_name }}"
    password: "{{ mysql_mysqldump_user_password }}"
    host: "{{ mysql_mysqldump_user_host }}"
    login_host: "{{ mysql_mysqldump_connect_ip }}"
    check_implicit_admin: true
    priv: "*.*:SELECT,FILE,LOCK TABLES"
    state: "present"
    append_privs: "yes"
    encrypted: "no"
  when:
    - not mysql_mysqldump_backup_cred_file_exists.stat.exists or mysql_mysqldump_backup_cred_file_overwrite
    - mysql_mysqldump_connect_method == "tcp"
    - not mysql_mysqldump_use_existing_user
  no_log: true
  tags:
    - alldbs
    - check
    - ringbuffer
    - user

- name: Create mysqldump directory if it does not exist
  ansible.builtin.file:
    path: "{{ mysql_mysqldump_directory }}"
    owner: "root"
    group: "root"
    state: directory
    mode: '0700'
  tags:
    - alldbs
    - check
    - ringbuffer
    - scripts
    - user

- name: Create mysqldump directory if it does not exist (alldbs)
  ansible.builtin.file:
    path: "{{ mysql_mysqldump_directory_alldbs }}"
    owner: "root"
    group: "root"
    state: directory
    mode: '0700'
  tags:
    - alldbs
    - check
    - scripts

- name: Create mysqldump directory if it does not exist (ringbuffer)
  ansible.builtin.file:
    path: "{{ mysql_mysqldump_directory_ringbuffer }}"
    owner: "root"
    group: "root"
    state: directory
    mode: '0700'
  tags:
    - ringbuffer
    - scripts

- name: Copy mysql_mysqldump_backup_cred_file with credentials
  ansible.builtin.template:
    src: "mysqldump_my.cnf.j2"
    dest: "{{ mysql_mysqldump_backup_cred_file }}"
    owner: "root"
    group: "root"
    mode: '0600'
  no_log: true
  when:
    - not mysql_mysqldump_backup_cred_file_exists.stat.exists or mysql_mysqldump_backup_cred_file_overwrite
    - not mysql_mysqldump_use_existing_user
  tags:
    - alldbs
    - check
    - ringbuffer
    - user

- name: Copy mysqldump shellscript (all DBs)
  ansible.builtin.template:
    src: "mysqldump_alldbs.sh.j2"
    dest: "{{ mysql_mysqldump_fullpath_alldbs }}"
    owner: "root"
    group: "root"
    mode: '0700'
  tags:
    - alldbs
    - scripts

- name: Copy mysqldump shellscript (ringbuffer)
  ansible.builtin.template:
    src: "mysqldump_alldbs_ringbuffer.sh.j2"
    dest: "{{ mysql_mysqldump_fullpath_ringbuffer }}"
    owner: "root"
    group: "root"
    mode: '0700'
  tags:
    - alldbs
    - scripts

- name: Create mysqldump cronjob (all DBs)
  ansible.builtin.template:
    src: "{{ mysql_mysqldump_cronjob_alldbs_template }}"
    dest: "{{ mysql_mysqldump_cronjob_alldbs_dest }}"
    owner: "root"
    group: "root"
    mode: '0755'
  when: mysql_mysqldump_cronjob_alldbs_create
  tags:
    - alldbs
    - cronjob

- name: Create mysqldump cronjob (ringbuffer)
  ansible.builtin.template:
    src: "{{ mysql_mysqldump_cronjob_ringbuffer_template }}"
    dest: "{{ mysql_mysqldump_cronjob_ringbuffer_dest }}"
    owner: "root"
    group: "root"
    mode: '0755'
  when: mysql_mysqldump_cronjob_ringbuffer_create
  tags:
    - cronjob
    - ringbuffer

- name: Check if credentials are working for mysqldump (socket)
  ansible.builtin.command: mysqladmin --defaults-file="{{ mysql_mysqldump_backup_cred_file }}" ping
  register: mysqladmin_output
  check_mode: false
  changed_when: false
  when:
    - mysql_mysqldump_connect_method == "socket"
  tags:
    - check
    - user

- name: Check if credentials are working for mysqldump (tcp)
  ansible.builtin.command: mysqladmin --defaults-file="{{ mysql_mysqldump_backup_cred_file }}" -h"{{ mysql_mysqldump_connect_ip }}" -P"{{ mysql_mysqldump_connect_port }}" ping
  register: mysqladmin_output
  check_mode: false
  changed_when: false
  when:
    - mysql_mysqldump_connect_method == "tcp"
  tags:
    - check
    - user

- name: Check if credentials are working for mysqldump (output)
  ansible.builtin.debug: msg="{{ mysql_version }} status is {{ mysqladmin_output }}"
  # should be "mysqld is alive"
  check_mode: false
  changed_when: false
  tags:
    - check
    - user
