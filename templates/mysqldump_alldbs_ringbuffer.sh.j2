#!/bin/bash
# === SQL-Dumps ===
# Passwort muss in .my.cnf stehen!
# siehe: http://dev.mysql.com/doc/refman/5.0/en/password-security.html
#
#[client]
#user="backup"
#password="secret"

db_exclude="{{ mysql_mysqldump_exclude_databases }}"

umask 077
i=0
e=0

mysqldump_extra_file="{{ mysql_mysqldump_backup_cred_file }}"
target_path="{{ mysql_mysqldump_directory_ringbuffer }}"

{% if mysql_mysqldump_sleep_time is defined %}
sleep {{ mysql_mysqldump_sleep_time }}
{% endif %}

datestring=$(date +%Y-%m-%d-%H:%M)

# deleting sql-dumps older than x days:
find "$target_path"/*.sql -mtime +{{ mysql_mysqldump_ringbuffer_retention_days }} -exec rm {} \; 2> /dev/null
find "$target_path"/*.sql.gz -mtime +{{ mysql_mysqldump_ringbuffer_retention_days }} -exec rm {} \; 2> /dev/null

{% if mysql_mysqldump_connect_method == "socket" %}
for x in $(mysql --defaults-extra-file="$mysqldump_extra_file" --protocol=SOCKET -Bse 'show databases'); do
{% endif %}
{% if mysql_mysqldump_connect_method == "tcp" %}
for x in $(mysql --defaults-extra-file="$mysqldump_extra_file" --protocol=TCP -h {{ mysql_mysqldump_connect_ip }} -Bse 'show databases'); do
{% endif %}
  if [ $(echo $x | egrep $db_exclude) ]; then
    # echo "skipping database $x"
    continue
  # else
    # echo "dumping database $x"
  fi
  # mysqldump --defaults-extra-file="$mysqldump_extra_file" --single-transaction --add-drop-table $x > "$target_path"/DB-Backup-${datestring}-${x}.sql 2> /dev/null
  # gzipped:
  {% if mysql_mysqldump_connect_method == "socket" %}
  mysqldump --defaults-extra-file="$mysqldump_extra_file" --single-transaction --add-drop-table $x --protocol=SOCKET |gzip 2> /dev/null > "$target_path"/DB-Backup-${datestring}-${x}.sql.gz
  {% endif %}
  {% if mysql_mysqldump_connect_method == "tcp" %}
  mysqldump --defaults-extra-file="$mysqldump_extra_file" --single-transaction --add-drop-table $x --protocol=TCP -h {{ mysql_mysqldump_connect_ip }} |gzip 2> /dev/null > "$target_path"/DB-Backup-${datestring}-${x}.sql.gz
  {% endif %}
  if [ $? -ne 0 ]; then
    let e=$e+1
  fi
  let i=$i+1
done

if [ $e -gt 0 ]; then
  echo "Errors on $e out of $i databases."
  exit 1
fi
